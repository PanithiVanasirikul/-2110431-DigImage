# -*- coding: utf-8 -*-
"""Final_Dig_Image.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rw4iXDx3WzeAmIZo6JxqxH7MkUK9IJlg
"""

from math import log10, sqrt
from skimage import io,color
import cv2
import matplotlib.pyplot as plt
import numpy as np

#input: image_bgr มาจาก opencv lib
#output: num_count ตามฟังก์ชัน result_image เป็น bgr
def count_all_objs(image_bgr):
  image_gray = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2GRAY)
  eroded_image = eroded(image_gray)
  connectivity = 4
  output = cv2.connectedComponentsWithStats(eroded_image, connectivity, cv2.CV_32S)
  no_labels = output[0]-2
  labels = output[1]
  stats = output[2]
  centroids = output[3]
  num_count = no_labels
  result_image = image_bgr.copy()
  for i in range(no_labels):
    cv2.putText(result_image, str(i+1), (int(centroids[i+2][0]-40), int(centroids[i+2][1]-10)), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,255,255), 8)
  return num_count, result_image
def count_circles(image_bgr):
  image_gray = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2GRAY)
  eroded_image = eroded(image_gray)
  output = cv2.connectedComponentsWithStats(eroded_image, connectivity, cv2.CV_32S)
  no_labels = output[0]-2
  labels = output[1]
  stats = output[2]
  centroids = output[3]
  num_count = 0
  result_image = image_bgr.copy()
  for i in range(no_labels):
    a = np.sum((labels==i+2).astype(np.uint8))
    if image_type(a) =="small circle" or image_type(a) =="medium circle" or image_type(a) =="large circle":
      num_count+=1
      cv2.putText(result_image, str(num_count), (int(centroids[i+2][0]-40), int(centroids[i+2][1]-10)), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,255,255), 8)
  return num_count, result_image
def count_small_circles(image_bgr):
  image_gray = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2GRAY)
  eroded_image = eroded(image_gray)
  output = cv2.connectedComponentsWithStats(eroded_image, connectivity, cv2.CV_32S)
  no_labels = output[0]-2
  labels = output[1]
  stats = output[2]
  centroids = output[3]
  num_count = 0
  result_image = image_bgr.copy()
  for i in range(no_labels):
    a = np.sum((labels==i+2).astype(np.uint8))
    if image_type(a) =="small circle":
      num_count+=1
      cv2.putText(result_image, str(num_count), (int(centroids[i+2][0]-40), int(centroids[i+2][1]-10)), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,255,255), 8)
  return num_count, result_image
def count_med_circles(image_bgr):
  image_gray = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2GRAY)
  eroded_image = eroded(image_gray)
  output = cv2.connectedComponentsWithStats(eroded_image, connectivity, cv2.CV_32S)
  no_labels = output[0]-2
  labels = output[1]
  stats = output[2]
  centroids = output[3]
  num_count = 0
  result_image = image_bgr.copy()
  for i in range(no_labels):
    a = np.sum((labels==i+2).astype(np.uint8))
    if image_type(a) =="medium circle":
      num_count+=1
      cv2.putText(result_image, str(num_count), (int(centroids[i+2][0]-40), int(centroids[i+2][1]-10)), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,255,255), 8)
  return num_count, result_image
def count_large_circles(image_bgr):
  image_gray = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2GRAY)
  eroded_image = eroded(image_gray)
  output = cv2.connectedComponentsWithStats(eroded_image, connectivity, cv2.CV_32S)
  no_labels = output[0]-2
  labels = output[1]
  stats = output[2]
  centroids = output[3]
  num_count = 0
  result_image = image_bgr.copy()
  for i in range(no_labels):
    a = np.sum((labels==i+2).astype(np.uint8))
    if image_type(a) =="large circle":
      num_count+=1
      cv2.putText(result_image, str(num_count), (int(centroids[i+2][0]-40), int(centroids[i+2][1]-10)), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,255,255), 8)
  return num_count, result_image
def count_triangles(image_bgr):
  image_gray = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2GRAY)
  eroded_image = eroded(image_gray)
  output = cv2.connectedComponentsWithStats(eroded_image, connectivity, cv2.CV_32S)
  no_labels = output[0]-2
  labels = output[1]
  stats = output[2]
  centroids = output[3]
  num_count = 0
  result_image = image_bgr.copy()
  for i in range(no_labels):
    a = np.sum((labels==i+2).astype(np.uint8))
    if image_type(a) =="small triangle" or image_type(a) =="medium triangle" or image_type(a) =="large triangle":
      num_count+=1
      cv2.putText(result_image, str(num_count), (int(centroids[i+2][0]-40), int(centroids[i+2][1]-10)), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,255,255), 8)
  return num_count, result_image
def count_rectangles(image_bgr):
  image_gray = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2GRAY)
  eroded_image = eroded(image_gray)
  output = cv2.connectedComponentsWithStats(eroded_image, connectivity, cv2.CV_32S)
  no_labels = output[0]-2
  labels = output[1]
  stats = output[2]
  centroids = output[3]
  num_count = 0
  result_image = image_bgr.copy()
  for i in range(no_labels):
    a = np.sum((labels==i+2).astype(np.uint8))
    if image_type(a) =="small rectangle" or image_type(a) =="medium rectangle" or image_type(a) =="large rectangle":
      num_count+=1
      cv2.putText(result_image, str(num_count), (int(centroids[i+2][0]-40), int(centroids[i+2][1]-10)), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,255,255), 8)
  return num_count, result_image
def count_umbrella(image_bgr):
  image_gray = cv2.cvtColor(image_bgr, cv2.COLOR_BGR2GRAY)
  eroded_image = eroded(image_gray)
  output = cv2.connectedComponentsWithStats(eroded_image, connectivity, cv2.CV_32S)
  no_labels = output[0]-2
  labels = output[1]
  stats = output[2]
  centroids = output[3]
  num_count = 0
  result_image = image_bgr.copy()
  for i in range(no_labels):
    a = np.sum((labels==i+2).astype(np.uint8))
    if image_type(a) =="umbrella":
      num_count+=1
      cv2.putText(result_image, str(num_count), (int(centroids[i+2][0]-40), int(centroids[i+2][1]-10)), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,255,255), 8)
  return num_count, result_image
def image_type(id):
  if id >= 13000 and id <= 15000:
    return "small triangle"
  if id >= 18000 and id <= 20000:
    return "small circle"
  if id >= 21000 and id <= 23000:
    return "umbrella"
  if id >= 25000 and id <= 27000:
    return "small rectangle"
  if id >= 39000 and id <= 41000:
    return "medium triangle"
  if id >= 57000 and id <= 59000:
    return "medium circle"
  if id >= 78000 and id <= 80000:
    return "medium rectangle"
  if id >= 81000 and id <= 87000:
    return "large triangle"
  if id >= 123000 and id <= 125000:
    return "large circle"
  if id >= 163000 and id <= 165000:
    return "large rectangle"
  return "none"
def eroded(image_bgr):
  ret,th1 = cv2.threshold(image_bgr,250,255,cv2.THRESH_BINARY_INV)
  th1 = (th1!=0).astype(np.uint8)
  kernel = np.ones((3,3), np.uint8)
  img_eroded = cv2.erode(th1,kernel,iterations = 1)
  return img_eroded

# img_0 = cv2.imread("0000.png",0)
# img_1 = cv2.imread("0001.png",0)
# img_2 = cv2.imread("0002.png")
# img_3 = cv2.imread("0003.png",0)
# num = (count_all_objs(img_2))[0]
# print(num)
# plt.imshow(img_3)
# plt.show()
# plt.imshow(img_3)
# plt.show()

# ret,th1 = cv2.threshold(img_3,250,255,cv2.THRESH_BINARY_INV)
# th1 = (th1!=0).astype(np.uint8)
# plt.imshow(th1)
# plt.show()
# kernel = np.ones((3,3), np.uint8)
# img_eroded = cv2.erode(th1,kernel,iterations = 1)
# connectivity = 4
# output = cv2.connectedComponentsWithStats(img_eroded, connectivity, cv2.CV_32S)
# no_labels = output[0]-2
# labels = output[1]
# stats = output[2]
# centroid = output[3]
# print(no_labels)
# cnt = no_labels
# for i in range(cnt):
#   plt.imshow((labels==i+2).astype(np.uint8))
#   plt.show()
#   print(np.sum((labels==i+2).astype(np.uint8)))

img_rgb = cv2.imread("0003.png")
num_count = (count_all_objs(img_rgb))[0]
result_image = (count_all_objs(img_rgb))[1]
plt.imshow(result_image[:,:,::-1]);plt.show()
print("Num of all objects: ", num_count)
num_count,result_image = count_circles(img_rgb)
plt.imshow(result_image[:,:,::-1]);plt.show()
print("Num of circles: ", num_count)
num_count,result_image = count_small_circles(img_rgb)
plt.imshow(result_image[:,:,::-1]);plt.show()
print("Num of small circles: ", num_count)
num_count,result_image = count_med_circles(img_rgb)
plt.imshow(result_image[:,:,::-1]);plt.show()
print("Num of medium circles: ", num_count)
num_count,result_image = count_large_circles(img_rgb)
plt.imshow(result_image[:,:,::-1]);plt.show()
print("Num of large circles: ", num_count)
num_count,result_image = count_rectangles(img_rgb)
plt.imshow(result_image[:,:,::-1]);plt.show()
print("Num of rectangles: ", num_count)
num_count,result_image = count_triangles(img_rgb)
plt.imshow(result_image[:,:,::-1]);plt.show()
print("Num of triangles: ", num_count)
num_count,result_image = count_umbrella(img_rgb)
plt.imshow(result_image[:,:,::-1]);plt.show()
print("Num of umbrella: ", num_count)
print("----------------------------------------------")